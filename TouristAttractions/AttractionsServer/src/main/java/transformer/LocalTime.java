/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package transformer;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class LocalTime implements org.apache.thrift.TBase<LocalTime, LocalTime._Fields>, java.io.Serializable, Cloneable, Comparable<LocalTime> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("LocalTime");

  private static final org.apache.thrift.protocol.TField HOUR_FIELD_DESC = new org.apache.thrift.protocol.TField("hour", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField MINUTE_FIELD_DESC = new org.apache.thrift.protocol.TField("minute", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField SECOND_FIELD_DESC = new org.apache.thrift.protocol.TField("second", org.apache.thrift.protocol.TType.I32, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new LocalTimeStandardSchemeFactory());
    schemes.put(TupleScheme.class, new LocalTimeTupleSchemeFactory());
  }

  public int hour; // required
  public int minute; // required
  public int second; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    HOUR((short)1, "hour"),
    MINUTE((short)2, "minute"),
    SECOND((short)3, "second");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // HOUR
          return HOUR;
        case 2: // MINUTE
          return MINUTE;
        case 3: // SECOND
          return SECOND;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __HOUR_ISSET_ID = 0;
  private static final int __MINUTE_ISSET_ID = 1;
  private static final int __SECOND_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.HOUR, new org.apache.thrift.meta_data.FieldMetaData("hour", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MINUTE, new org.apache.thrift.meta_data.FieldMetaData("minute", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SECOND, new org.apache.thrift.meta_data.FieldMetaData("second", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(LocalTime.class, metaDataMap);
  }

  public LocalTime() {
  }

  public LocalTime(
    int hour,
    int minute,
    int second)
  {
    this();
    this.hour = hour;
    setHourIsSet(true);
    this.minute = minute;
    setMinuteIsSet(true);
    this.second = second;
    setSecondIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public LocalTime(LocalTime other) {
    __isset_bitfield = other.__isset_bitfield;
    this.hour = other.hour;
    this.minute = other.minute;
    this.second = other.second;
  }

  public LocalTime deepCopy() {
    return new LocalTime(this);
  }

  @Override
  public void clear() {
    setHourIsSet(false);
    this.hour = 0;
    setMinuteIsSet(false);
    this.minute = 0;
    setSecondIsSet(false);
    this.second = 0;
  }

  public int getHour() {
    return this.hour;
  }

  public LocalTime setHour(int hour) {
    this.hour = hour;
    setHourIsSet(true);
    return this;
  }

  public void unsetHour() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __HOUR_ISSET_ID);
  }

  /** Returns true if field hour is set (has been assigned a value) and false otherwise */
  public boolean isSetHour() {
    return EncodingUtils.testBit(__isset_bitfield, __HOUR_ISSET_ID);
  }

  public void setHourIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __HOUR_ISSET_ID, value);
  }

  public int getMinute() {
    return this.minute;
  }

  public LocalTime setMinute(int minute) {
    this.minute = minute;
    setMinuteIsSet(true);
    return this;
  }

  public void unsetMinute() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MINUTE_ISSET_ID);
  }

  /** Returns true if field minute is set (has been assigned a value) and false otherwise */
  public boolean isSetMinute() {
    return EncodingUtils.testBit(__isset_bitfield, __MINUTE_ISSET_ID);
  }

  public void setMinuteIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MINUTE_ISSET_ID, value);
  }

  public int getSecond() {
    return this.second;
  }

  public LocalTime setSecond(int second) {
    this.second = second;
    setSecondIsSet(true);
    return this;
  }

  public void unsetSecond() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SECOND_ISSET_ID);
  }

  /** Returns true if field second is set (has been assigned a value) and false otherwise */
  public boolean isSetSecond() {
    return EncodingUtils.testBit(__isset_bitfield, __SECOND_ISSET_ID);
  }

  public void setSecondIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SECOND_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case HOUR:
      if (value == null) {
        unsetHour();
      } else {
        setHour((Integer)value);
      }
      break;

    case MINUTE:
      if (value == null) {
        unsetMinute();
      } else {
        setMinute((Integer)value);
      }
      break;

    case SECOND:
      if (value == null) {
        unsetSecond();
      } else {
        setSecond((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case HOUR:
      return Integer.valueOf(getHour());

    case MINUTE:
      return Integer.valueOf(getMinute());

    case SECOND:
      return Integer.valueOf(getSecond());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case HOUR:
      return isSetHour();
    case MINUTE:
      return isSetMinute();
    case SECOND:
      return isSetSecond();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof LocalTime)
      return this.equals((LocalTime)that);
    return false;
  }

  public boolean equals(LocalTime that) {
    if (that == null)
      return false;

    boolean this_present_hour = true;
    boolean that_present_hour = true;
    if (this_present_hour || that_present_hour) {
      if (!(this_present_hour && that_present_hour))
        return false;
      if (this.hour != that.hour)
        return false;
    }

    boolean this_present_minute = true;
    boolean that_present_minute = true;
    if (this_present_minute || that_present_minute) {
      if (!(this_present_minute && that_present_minute))
        return false;
      if (this.minute != that.minute)
        return false;
    }

    boolean this_present_second = true;
    boolean that_present_second = true;
    if (this_present_second || that_present_second) {
      if (!(this_present_second && that_present_second))
        return false;
      if (this.second != that.second)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(LocalTime other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetHour()).compareTo(other.isSetHour());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHour()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hour, other.hour);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMinute()).compareTo(other.isSetMinute());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMinute()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.minute, other.minute);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSecond()).compareTo(other.isSetSecond());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSecond()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.second, other.second);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("LocalTime(");
    boolean first = true;

    sb.append("hour:");
    sb.append(this.hour);
    first = false;
    if (!first) sb.append(", ");
    sb.append("minute:");
    sb.append(this.minute);
    first = false;
    if (!first) sb.append(", ");
    sb.append("second:");
    sb.append(this.second);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class LocalTimeStandardSchemeFactory implements SchemeFactory {
    public LocalTimeStandardScheme getScheme() {
      return new LocalTimeStandardScheme();
    }
  }

  private static class LocalTimeStandardScheme extends StandardScheme<LocalTime> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, LocalTime struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // HOUR
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.hour = iprot.readI32();
              struct.setHourIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // MINUTE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.minute = iprot.readI32();
              struct.setMinuteIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SECOND
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.second = iprot.readI32();
              struct.setSecondIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, LocalTime struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(HOUR_FIELD_DESC);
      oprot.writeI32(struct.hour);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MINUTE_FIELD_DESC);
      oprot.writeI32(struct.minute);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SECOND_FIELD_DESC);
      oprot.writeI32(struct.second);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class LocalTimeTupleSchemeFactory implements SchemeFactory {
    public LocalTimeTupleScheme getScheme() {
      return new LocalTimeTupleScheme();
    }
  }

  private static class LocalTimeTupleScheme extends TupleScheme<LocalTime> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, LocalTime struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetHour()) {
        optionals.set(0);
      }
      if (struct.isSetMinute()) {
        optionals.set(1);
      }
      if (struct.isSetSecond()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetHour()) {
        oprot.writeI32(struct.hour);
      }
      if (struct.isSetMinute()) {
        oprot.writeI32(struct.minute);
      }
      if (struct.isSetSecond()) {
        oprot.writeI32(struct.second);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, LocalTime struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.hour = iprot.readI32();
        struct.setHourIsSet(true);
      }
      if (incoming.get(1)) {
        struct.minute = iprot.readI32();
        struct.setMinuteIsSet(true);
      }
      if (incoming.get(2)) {
        struct.second = iprot.readI32();
        struct.setSecondIsSet(true);
      }
    }
  }

}

