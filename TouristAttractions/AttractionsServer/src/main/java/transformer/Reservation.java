/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package transformer;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Reservation implements org.apache.thrift.TBase<Reservation, Reservation._Fields>, java.io.Serializable, Cloneable, Comparable<Reservation> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Reservation");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField AGENCY_USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("agencyUserId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField TRIP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("tripId", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField NR_TICKETS_FIELD_DESC = new org.apache.thrift.protocol.TField("nrTickets", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField CLIENT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("clientName", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField TELEPHONE_FIELD_DESC = new org.apache.thrift.protocol.TField("telephone", org.apache.thrift.protocol.TType.STRING, (short)6);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ReservationStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ReservationTupleSchemeFactory());
  }

  public int id; // required
  public int agencyUserId; // required
  public int tripId; // required
  public int nrTickets; // required
  public String clientName; // required
  public String telephone; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    AGENCY_USER_ID((short)2, "agencyUserId"),
    TRIP_ID((short)3, "tripId"),
    NR_TICKETS((short)4, "nrTickets"),
    CLIENT_NAME((short)5, "clientName"),
    TELEPHONE((short)6, "telephone");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // AGENCY_USER_ID
          return AGENCY_USER_ID;
        case 3: // TRIP_ID
          return TRIP_ID;
        case 4: // NR_TICKETS
          return NR_TICKETS;
        case 5: // CLIENT_NAME
          return CLIENT_NAME;
        case 6: // TELEPHONE
          return TELEPHONE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __AGENCYUSERID_ISSET_ID = 1;
  private static final int __TRIPID_ISSET_ID = 2;
  private static final int __NRTICKETS_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.AGENCY_USER_ID, new org.apache.thrift.meta_data.FieldMetaData("agencyUserId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TRIP_ID, new org.apache.thrift.meta_data.FieldMetaData("tripId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NR_TICKETS, new org.apache.thrift.meta_data.FieldMetaData("nrTickets", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CLIENT_NAME, new org.apache.thrift.meta_data.FieldMetaData("clientName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TELEPHONE, new org.apache.thrift.meta_data.FieldMetaData("telephone", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Reservation.class, metaDataMap);
  }

  public Reservation() {
  }

  public Reservation(
    int id,
    int agencyUserId,
    int tripId,
    int nrTickets,
    String clientName,
    String telephone)
  {
    this();
    this.id = id;
    setIdIsSet(true);
    this.agencyUserId = agencyUserId;
    setAgencyUserIdIsSet(true);
    this.tripId = tripId;
    setTripIdIsSet(true);
    this.nrTickets = nrTickets;
    setNrTicketsIsSet(true);
    this.clientName = clientName;
    this.telephone = telephone;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Reservation(Reservation other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    this.agencyUserId = other.agencyUserId;
    this.tripId = other.tripId;
    this.nrTickets = other.nrTickets;
    if (other.isSetClientName()) {
      this.clientName = other.clientName;
    }
    if (other.isSetTelephone()) {
      this.telephone = other.telephone;
    }
  }

  public Reservation deepCopy() {
    return new Reservation(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    setAgencyUserIdIsSet(false);
    this.agencyUserId = 0;
    setTripIdIsSet(false);
    this.tripId = 0;
    setNrTicketsIsSet(false);
    this.nrTickets = 0;
    this.clientName = null;
    this.telephone = null;
  }

  public int getId() {
    return this.id;
  }

  public Reservation setId(int id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public int getAgencyUserId() {
    return this.agencyUserId;
  }

  public Reservation setAgencyUserId(int agencyUserId) {
    this.agencyUserId = agencyUserId;
    setAgencyUserIdIsSet(true);
    return this;
  }

  public void unsetAgencyUserId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __AGENCYUSERID_ISSET_ID);
  }

  /** Returns true if field agencyUserId is set (has been assigned a value) and false otherwise */
  public boolean isSetAgencyUserId() {
    return EncodingUtils.testBit(__isset_bitfield, __AGENCYUSERID_ISSET_ID);
  }

  public void setAgencyUserIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __AGENCYUSERID_ISSET_ID, value);
  }

  public int getTripId() {
    return this.tripId;
  }

  public Reservation setTripId(int tripId) {
    this.tripId = tripId;
    setTripIdIsSet(true);
    return this;
  }

  public void unsetTripId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TRIPID_ISSET_ID);
  }

  /** Returns true if field tripId is set (has been assigned a value) and false otherwise */
  public boolean isSetTripId() {
    return EncodingUtils.testBit(__isset_bitfield, __TRIPID_ISSET_ID);
  }

  public void setTripIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TRIPID_ISSET_ID, value);
  }

  public int getNrTickets() {
    return this.nrTickets;
  }

  public Reservation setNrTickets(int nrTickets) {
    this.nrTickets = nrTickets;
    setNrTicketsIsSet(true);
    return this;
  }

  public void unsetNrTickets() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NRTICKETS_ISSET_ID);
  }

  /** Returns true if field nrTickets is set (has been assigned a value) and false otherwise */
  public boolean isSetNrTickets() {
    return EncodingUtils.testBit(__isset_bitfield, __NRTICKETS_ISSET_ID);
  }

  public void setNrTicketsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NRTICKETS_ISSET_ID, value);
  }

  public String getClientName() {
    return this.clientName;
  }

  public Reservation setClientName(String clientName) {
    this.clientName = clientName;
    return this;
  }

  public void unsetClientName() {
    this.clientName = null;
  }

  /** Returns true if field clientName is set (has been assigned a value) and false otherwise */
  public boolean isSetClientName() {
    return this.clientName != null;
  }

  public void setClientNameIsSet(boolean value) {
    if (!value) {
      this.clientName = null;
    }
  }

  public String getTelephone() {
    return this.telephone;
  }

  public Reservation setTelephone(String telephone) {
    this.telephone = telephone;
    return this;
  }

  public void unsetTelephone() {
    this.telephone = null;
  }

  /** Returns true if field telephone is set (has been assigned a value) and false otherwise */
  public boolean isSetTelephone() {
    return this.telephone != null;
  }

  public void setTelephoneIsSet(boolean value) {
    if (!value) {
      this.telephone = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Integer)value);
      }
      break;

    case AGENCY_USER_ID:
      if (value == null) {
        unsetAgencyUserId();
      } else {
        setAgencyUserId((Integer)value);
      }
      break;

    case TRIP_ID:
      if (value == null) {
        unsetTripId();
      } else {
        setTripId((Integer)value);
      }
      break;

    case NR_TICKETS:
      if (value == null) {
        unsetNrTickets();
      } else {
        setNrTickets((Integer)value);
      }
      break;

    case CLIENT_NAME:
      if (value == null) {
        unsetClientName();
      } else {
        setClientName((String)value);
      }
      break;

    case TELEPHONE:
      if (value == null) {
        unsetTelephone();
      } else {
        setTelephone((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return Integer.valueOf(getId());

    case AGENCY_USER_ID:
      return Integer.valueOf(getAgencyUserId());

    case TRIP_ID:
      return Integer.valueOf(getTripId());

    case NR_TICKETS:
      return Integer.valueOf(getNrTickets());

    case CLIENT_NAME:
      return getClientName();

    case TELEPHONE:
      return getTelephone();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case AGENCY_USER_ID:
      return isSetAgencyUserId();
    case TRIP_ID:
      return isSetTripId();
    case NR_TICKETS:
      return isSetNrTickets();
    case CLIENT_NAME:
      return isSetClientName();
    case TELEPHONE:
      return isSetTelephone();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Reservation)
      return this.equals((Reservation)that);
    return false;
  }

  public boolean equals(Reservation that) {
    if (that == null)
      return false;

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_agencyUserId = true;
    boolean that_present_agencyUserId = true;
    if (this_present_agencyUserId || that_present_agencyUserId) {
      if (!(this_present_agencyUserId && that_present_agencyUserId))
        return false;
      if (this.agencyUserId != that.agencyUserId)
        return false;
    }

    boolean this_present_tripId = true;
    boolean that_present_tripId = true;
    if (this_present_tripId || that_present_tripId) {
      if (!(this_present_tripId && that_present_tripId))
        return false;
      if (this.tripId != that.tripId)
        return false;
    }

    boolean this_present_nrTickets = true;
    boolean that_present_nrTickets = true;
    if (this_present_nrTickets || that_present_nrTickets) {
      if (!(this_present_nrTickets && that_present_nrTickets))
        return false;
      if (this.nrTickets != that.nrTickets)
        return false;
    }

    boolean this_present_clientName = true && this.isSetClientName();
    boolean that_present_clientName = true && that.isSetClientName();
    if (this_present_clientName || that_present_clientName) {
      if (!(this_present_clientName && that_present_clientName))
        return false;
      if (!this.clientName.equals(that.clientName))
        return false;
    }

    boolean this_present_telephone = true && this.isSetTelephone();
    boolean that_present_telephone = true && that.isSetTelephone();
    if (this_present_telephone || that_present_telephone) {
      if (!(this_present_telephone && that_present_telephone))
        return false;
      if (!this.telephone.equals(that.telephone))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(Reservation other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAgencyUserId()).compareTo(other.isSetAgencyUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAgencyUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.agencyUserId, other.agencyUserId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTripId()).compareTo(other.isSetTripId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTripId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tripId, other.tripId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNrTickets()).compareTo(other.isSetNrTickets());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNrTickets()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nrTickets, other.nrTickets);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetClientName()).compareTo(other.isSetClientName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClientName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientName, other.clientName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTelephone()).compareTo(other.isSetTelephone());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTelephone()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.telephone, other.telephone);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Reservation(");
    boolean first = true;

    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("agencyUserId:");
    sb.append(this.agencyUserId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("tripId:");
    sb.append(this.tripId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("nrTickets:");
    sb.append(this.nrTickets);
    first = false;
    if (!first) sb.append(", ");
    sb.append("clientName:");
    if (this.clientName == null) {
      sb.append("null");
    } else {
      sb.append(this.clientName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("telephone:");
    if (this.telephone == null) {
      sb.append("null");
    } else {
      sb.append(this.telephone);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ReservationStandardSchemeFactory implements SchemeFactory {
    public ReservationStandardScheme getScheme() {
      return new ReservationStandardScheme();
    }
  }

  private static class ReservationStandardScheme extends StandardScheme<Reservation> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Reservation struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.id = iprot.readI32();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // AGENCY_USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.agencyUserId = iprot.readI32();
              struct.setAgencyUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TRIP_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.tripId = iprot.readI32();
              struct.setTripIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // NR_TICKETS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.nrTickets = iprot.readI32();
              struct.setNrTicketsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // CLIENT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.clientName = iprot.readString();
              struct.setClientNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // TELEPHONE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.telephone = iprot.readString();
              struct.setTelephoneIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Reservation struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI32(struct.id);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(AGENCY_USER_ID_FIELD_DESC);
      oprot.writeI32(struct.agencyUserId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TRIP_ID_FIELD_DESC);
      oprot.writeI32(struct.tripId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NR_TICKETS_FIELD_DESC);
      oprot.writeI32(struct.nrTickets);
      oprot.writeFieldEnd();
      if (struct.clientName != null) {
        oprot.writeFieldBegin(CLIENT_NAME_FIELD_DESC);
        oprot.writeString(struct.clientName);
        oprot.writeFieldEnd();
      }
      if (struct.telephone != null) {
        oprot.writeFieldBegin(TELEPHONE_FIELD_DESC);
        oprot.writeString(struct.telephone);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ReservationTupleSchemeFactory implements SchemeFactory {
    public ReservationTupleScheme getScheme() {
      return new ReservationTupleScheme();
    }
  }

  private static class ReservationTupleScheme extends TupleScheme<Reservation> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Reservation struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetAgencyUserId()) {
        optionals.set(1);
      }
      if (struct.isSetTripId()) {
        optionals.set(2);
      }
      if (struct.isSetNrTickets()) {
        optionals.set(3);
      }
      if (struct.isSetClientName()) {
        optionals.set(4);
      }
      if (struct.isSetTelephone()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetId()) {
        oprot.writeI32(struct.id);
      }
      if (struct.isSetAgencyUserId()) {
        oprot.writeI32(struct.agencyUserId);
      }
      if (struct.isSetTripId()) {
        oprot.writeI32(struct.tripId);
      }
      if (struct.isSetNrTickets()) {
        oprot.writeI32(struct.nrTickets);
      }
      if (struct.isSetClientName()) {
        oprot.writeString(struct.clientName);
      }
      if (struct.isSetTelephone()) {
        oprot.writeString(struct.telephone);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Reservation struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.id = iprot.readI32();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.agencyUserId = iprot.readI32();
        struct.setAgencyUserIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.tripId = iprot.readI32();
        struct.setTripIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.nrTickets = iprot.readI32();
        struct.setNrTicketsIsSet(true);
      }
      if (incoming.get(4)) {
        struct.clientName = iprot.readString();
        struct.setClientNameIsSet(true);
      }
      if (incoming.get(5)) {
        struct.telephone = iprot.readString();
        struct.setTelephoneIsSet(true);
      }
    }
  }

}

